document.addEventListener("DOMContentLoaded", () => {
  // Selecting DOM Elements
  const deleteButton = document.getElementById("delete-image");
  const displayedImage = document.getElementById("displayed-image");
  const dissolveFilter = document.getElementById("dissolve-filter");
  const displacementMap = dissolveFilter.querySelector("feDisplacementMap");
  const bigNoise = dissolveFilter.querySelector(
    'feTurbulence[result="bigNoise"]'
  );

  const safariWarning = document.querySelector(".safari-warning");
  const mainContainer = document.querySelector(".container");

  let isAnimating = false; // Flag to prevent multiple animations

  /**
   * Function to detect Safari browser
   * @returns {boolean} - True if Safari, false otherwise
   */
  function isSafariBrowser() {
    const ua = navigator.userAgent.toLowerCase();
    return (
      ua.includes("safari") && !ua.includes("chrome") && !ua.includes("android")
    );
  }

  // Check if the browser is Safari
  if (isSafariBrowser()) {
    // Hide the main content
    mainContainer.classList.add("hidden");
    // Show the Safari warning message
    safariWarning.classList.remove("hidden");
    return; // Exit the script to prevent further execution
  }

  // Array of Image URLs
  const images = [
    "https://i.ibb.co/2sxT6jZ/Retro-80s-Human-Flying-Poster-cropped.jpg",
    "https://i.ibb.co/W5qWCkK/mishkadoing-summer-flowers-sky-close-up-details-painting-grad-0e9886ef-403e-4514-866f-e7806fa3dad8-1.jpg",
    "https://i.ibb.co/Xp6s8KR/Monet-Flowers-Rocks-Corals.png",
    "https://i.ibb.co/cYp3hCD/Field-of-Wildflowers-Constellations.png",
    "https://i.ibb.co/5FP5HD9/Summer-Flowers-Sky-Close-Up.png",
    "https://i.ibb.co/cL1fKgc/Summer-Flowers-Painting.png"
  ];

  let currentIndex = 0; // Track the current image index

  /**
   * Sets a random seed for the turbulence effect to vary the noise pattern
   */
  function setRandomSeed() {
    const randomSeed = Math.floor(Math.random() * 1000);
    bigNoise.setAttribute("seed", randomSeed);
  }

  /**
   * Easing function for smooth animation (Ease Out Cubic)
   * @param {number} t - Current time progress (0 to 1)
   * @returns {number} - Eased progress
   */
  function easeOutCubic(t) {
    return 1 - Math.pow(1 - t, 3);
  }

  const maxDisplacementScale = 2000; // Maximum displacement scale for the effect

  /**
   * Displays the next image in the array with reset styles
   */
  function showNextImage() {
    currentIndex = (currentIndex + 1) % images.length;
    displayedImage.src = images[currentIndex];
    displayedImage.style.display = "block";
    displayedImage.style.transform = "scale(1)";
    displayedImage.style.opacity = "1";
    displacementMap.setAttribute("scale", "0");

    deleteButton.classList.remove("hidden");
  }

  /**
   * Handles the delete button click event to trigger the dissolve animation
   */
  deleteButton.addEventListener("click", () => {
    // Prevent animation if already animating or image is hidden
    if (isAnimating || displayedImage.style.display === "none") return;
    isAnimating = true;

    setRandomSeed(); // Vary the noise pattern

    deleteButton.classList.add("hidden"); // Hide the delete button during animation

    const duration = 1000; // Animation duration in milliseconds
    const startTime = performance.now(); // Record the start time

    /**
     * Animation loop using requestAnimationFrame for smooth updates
     * @param {number} currentTime - The current time in milliseconds
     */
    function animate(currentTime) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1); // Clamp progress between 0 and 1
      const easedProgress = easeOutCubic(progress); // Apply easing

      // Calculate and apply displacement scale based on eased progress
      const displacementScale = easedProgress * maxDisplacementScale;
      displacementMap.setAttribute("scale", displacementScale);

      // Slightly scale the image for a dynamic effect
      const scaleFactor = 1 + 0.1 * easedProgress;
      displayedImage.style.transform = `scale(${scaleFactor})`;

      // Adjust image opacity to create a fading effect
      let opacity;
      if (progress < 0.5) {
        opacity = 1;
      } else {
        const opacityProgress = (progress - 0.5) / 0.5;
        opacity = 1 - opacityProgress;
      }
      displayedImage.style.opacity = opacity;

      if (progress < 1) {
        // Continue the animation
        requestAnimationFrame(animate);
      } else {
        // Reset styles and show the next image after animation completes
        setTimeout(() => {
          displayedImage.style.display = "none";
          displayedImage.style.transform = "scale(1)";
          displayedImage.style.opacity = "1";
          displacementMap.setAttribute("scale", "0");
          isAnimating = false;
          showNextImage();
        }, 0);
      }
    }

    // Start the animation
    requestAnimationFrame(animate);
  });

  // Initialize the first image display
  displayedImage.src = images[currentIndex];
  displayedImage.style.display = "block";
});
